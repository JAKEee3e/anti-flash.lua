local Workspace, RunService, Players, CoreGui, Lighting = cloneref(game:GetService("Workspace")), cloneref(game:GetService("RunService")), cloneref(game:GetService("Players")), game:GetService("CoreGui"), cloneref(game:GetService("Lighting"))

-- Add RGB cycling function at the top
local function CreateRGB()
    local rgb = {}
    rgb.r = 255
    rgb.g = 0
    rgb.b = 0
    rgb.changing = 1
    
    return function()
        if rgb.changing == 1 then
            rgb.g = rgb.g + 5
            if rgb.g >= 255 then
                rgb.changing = 2
            end
        elseif rgb.changing == 2 then
            rgb.r = rgb.r - 5
            if rgb.r <= 0 then
                rgb.changing = 3
            end
        elseif rgb.changing == 3 then
            rgb.b = rgb.b + 5
            if rgb.b >= 255 then
                rgb.changing = 4
            end
        elseif rgb.changing == 4 then
            rgb.g = rgb.g - 5
            if rgb.g <= 0 then
                rgb.changing = 5
            end
        elseif rgb.changing == 5 then
            rgb.r = rgb.r + 5
            if rgb.r >= 255 then
                rgb.changing = 6
            end
        elseif rgb.changing == 6 then
            rgb.b = rgb.b - 5
            if rgb.b <= 0 then
                rgb.changing = 1
            end
        end
        return Color3.fromRGB(rgb.r, rgb.g, rgb.b)
    end
end

local GetRGB = CreateRGB()

local ESP = {
    Enabled = true,
    TeamCheck = true,
    MaxDistance = 10000,
    FontSize = 13,
    FadeOut = {
        OnDistance = true,
        OnDeath = false,
        OnLeave = false,
    },
    Drawing = {
        Skeleton = {
            Enabled = true, -- Enable/disable skeleton ESP
            Color = Color3.fromRGB(255, 0, 0), -- Color of the skeleton lines
            Thickness = 1, -- Thickness of the skeleton lines
        },
    };
    Connections = {
        RunService = RunService;
    };
}

-- Def & Vars
local Euphoria = ESP.Connections;
local lplayer = Players.LocalPlayer;
local camera = game.Workspace.CurrentCamera;
local skeletonConnections = {}

-- Skeleton ESP
local function CreateSkeleton(character, player)
    local skeleton = {}
    local connections = {}

    -- Define bone connections
    local boneConnections = {
        {"Head", "UpperTorso"},
        {"UpperTorso", "LowerTorso"},
        {"UpperTorso", "LeftUpperArm"},
        {"LeftUpperArm", "LeftLowerArm"},
        {"LeftLowerArm", "LeftHand"},
        {"UpperTorso", "RightUpperArm"},
        {"RightUpperArm", "RightLowerArm"},
        {"RightLowerArm", "RightHand"},
        {"LowerTorso", "LeftUpperLeg"},
        {"LeftUpperLeg", "LeftLowerLeg"},
        {"LeftLowerLeg", "LeftFoot"},
        {"LowerTorso", "RightUpperLeg"},
        {"RightUpperLeg", "RightLowerLeg"},
        {"RightLowerLeg", "RightFoot"},
    }

    -- Create lines for each bone connection
    for _, connection in pairs(boneConnections) do
        local part1, part2 = connection[1], connection[2]
        local line = Drawing.new("Line")
        line.Visible = false
        line.Color = ESP.Drawing.Skeleton.Color
        line.Thickness = ESP.Drawing.Skeleton.Thickness
        skeleton[part1 .. part2] = line
    end

    -- Function to update skeleton
    local function UpdateSkeleton()
        -- Team check
        if ESP.TeamCheck and player.Team == lplayer.Team then
            for _, line in pairs(skeleton) do
                line.Visible = false
            end
            return
        end

        -- Health check
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if not humanoid or humanoid.Health <= 0 then
            for _, line in pairs(skeleton) do
                line.Visible = false
            end
            return
        end

        -- Update skeleton lines
        for _, connection in pairs(boneConnections) do
            local part1, part2 = connection[1], connection[2]
            local line = skeleton[part1 .. part2]
            local part1Instance = character:FindFirstChild(part1)
            local part2Instance = character:FindFirstChild(part2)

            if part1Instance and part2Instance then
                local pos1, onScreen1 = camera:WorldToViewportPoint(part1Instance.Position)
                local pos2, onScreen2 = camera:WorldToViewportPoint(part2Instance.Position)

                if onScreen1 and onScreen2 then
                    line.From = Vector2.new(pos1.X, pos1.Y)
                    line.To = Vector2.new(pos2.X, pos2.Y)
                    line.Visible = ESP.Drawing.Skeleton.Enabled
                else
                    line.Visible = false
                end
            else
                line.Visible = false
            end
        end
    end

    -- Connect to RenderStepped to update skeleton
    local connection = RunService.RenderStepped:Connect(UpdateSkeleton)
    table.insert(connections, connection)

    -- Cleanup function
    local function DestroySkeleton()
        for _, line in pairs(skeleton) do
            line:Remove()
        end
        for _, conn in pairs(connections) do
            conn:Disconnect()
        end
    end

    return DestroySkeleton
end

-- Add skeleton ESP for a player
local function AddSkeletonESP(player)
    if player.Character then
        skeletonConnections[player] = CreateSkeleton(player.Character, player)
    end
    player.CharacterAdded:Connect(function(character)
        if skeletonConnections[player] then
            skeletonConnections[player]() -- Clean up existing skeleton
        end
        skeletonConnections[player] = CreateSkeleton(character, player)
    end)
    player.CharacterRemoving:Connect(function()
        if skeletonConnections[player] then
            skeletonConnections[player]() -- Clean up skeleton when character is removed
            skeletonConnections[player] = nil
        end
    end)
end

-- Remove skeleton ESP for a player
local function RemoveSkeletonESP(player)
    if skeletonConnections[player] then
        skeletonConnections[player]()
        skeletonConnections[player] = nil
    end
end

-- Initialize skeleton ESP for existing players
for _, player in pairs(Players:GetPlayers()) do
    if player ~= lplayer then
        AddSkeletonESP(player)
    end
end

-- Initialize skeleton ESP for new players
Players.PlayerAdded:Connect(function(player)
    if player ~= lplayer then
        AddSkeletonESP(player)
    end
end)

-- Cleanup skeleton ESP when player leaves
Players.PlayerRemoving:Connect(function(player)
    RemoveSkeletonESP(player)
end)

-- Cleanup all skeleton ESP instances when the script is stopped
game:BindToClose(function()
    for _, destroySkeleton in pairs(skeletonConnections) do
        destroySkeleton()
    end
end)

-- Function to unload the ESP script
local function unloadESP()
    for _, destroySkeleton in pairs(skeletonConnections) do
        destroySkeleton()
    end
    skeletonConnections = {}
end

return unloadESP
