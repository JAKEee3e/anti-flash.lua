-- Services
local UserInputService = game:GetService("UserInputService")
local StarterGui = game:GetService("StarterGui")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Variables
local features = {
    { name = "Anti-Flash", scriptUrl = "https://raw.githubusercontent.com/JAKEee3e/anti-flash.lua/main/anti-flash" },
    { name = "Skeleton ESP", scriptUrl = "https://raw.githubusercontent.com/JAKEee3e/skeleton-esp.lua/main/skeleton-esp" },
    { name = "ESP", scriptUrl = "https://raw.githubusercontent.com/JAKEee3e/esp.lua/main/esp" },
    { name = "Radar", scriptUrl = "https://raw.githubusercontent.com/JAKEee3e/radar.lua/main/radar" },
    { name = "Aimbot", scriptUrl = "https://raw.githubusercontent.com/JAKEee3e/aimbot.lua/main/aimbot" }
}

local selectedFeatureIndex = 1
local guiVisible = true
local featureStates = {}
local featureScripts = {}

-- Initialize feature states
for i = 1, #features do
    featureStates[i] = false
    featureScripts[i] = nil
end

-- Create GUI
local screenGui = Instance.new("ScreenGui")
local frame = Instance.new("Frame")
local featureLabels = {}

-- Set GUI properties
screenGui.Name = "FeatureMenu"
screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

frame.Name = "MainFrame"
frame.Size = UDim2.new(0.12, 0, 0.25, 0)
frame.Position = UDim2.new(0.425, 0, 0.375, 0)
frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
frame.BorderSizePixel = 2
frame.BorderColor3 = Color3.fromRGB(60, 60, 60)
frame.Parent = screenGui

-- Create title label
local titleLabel = Instance.new("TextLabel")
titleLabel.Size = UDim2.new(1, 0, 0.15, 0)
titleLabel.Position = UDim2.new(0, 0, -0.15, 0)
titleLabel.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
titleLabel.Text = "Feature Menu"
titleLabel.TextSize = 16
titleLabel.Font = Enum.Font.SourceSansBold
titleLabel.Parent = frame

-- Create feature labels
for i, feature in ipairs(features) do
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 0.15, 0)
    label.Position = UDim2.new(0, 0, (i-1) * 0.2, 0)
    label.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.Text = feature.name
    label.TextSize = 14
    label.Font = Enum.Font.SourceSans
    label.Parent = frame
    table.insert(featureLabels, label)
end

-- Functions
local function updateSelection()
    for i, label in ipairs(featureLabels) do
        label.BackgroundColor3 = i == selectedFeatureIndex and Color3.fromRGB(60, 60, 60) or Color3.fromRGB(45, 45, 45)
        label.TextColor3 = featureStates[i] and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 255, 255)
    end
end

local function toggleGuiVisibility()
    guiVisible = not guiVisible
    screenGui.Enabled = guiVisible
end

-- Error Handler
local function safeLoadstring(url, featureName)
    local success, result = pcall(function()
        return game:HttpGet(url)
    end)
    
    if success then
        local loadSuccess, loadResult = pcall(loadstring, result)
        if loadSuccess then
            return loadResult
        else
            warn(string.format("Failed to load %s script: %s", featureName, tostring(loadResult)))
        end
    else
        warn(string.format("Failed to fetch %s script: %s", featureName, tostring(result)))
    end
    return nil
end

-- Unload feature script
local function unloadFeatureScript(index)
    if featureScripts[index] then
        local script = featureScripts[index]
        if typeof(script) == "function" then
            local success, err = pcall(script)
            if not success then
                warn(string.format("Failed to unload %s script: %s", features[index].name, tostring(err)))
            end
        end
        featureScripts[index] = nil
    end
end

-- Toggle feature
local function toggleFeature(index)
    featureStates[index] = not featureStates[index]
    if featureStates[index] then
        local script = safeLoadstring(features[index].scriptUrl, features[index].name)
        if script then
            featureScripts[index] = script
            local success, err = pcall(script)
            if not success then
                warn(string.format("Failed to execute %s script: %s", features[index].name, tostring(err)))
            end
        end
    else
        unloadFeatureScript(index)
    end
    updateSelection()
end

-- Input Handlers
UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.Up then
        selectedFeatureIndex = (selectedFeatureIndex - 2) % #features + 1
        updateSelection()
    elseif input.KeyCode == Enum.KeyCode.Down then
        selectedFeatureIndex = selectedFeatureIndex % #features + 1
        updateSelection()
    elseif input.KeyCode == Enum.KeyCode.Return then
        toggleFeature(selectedFeatureIndex)
    elseif input.KeyCode == Enum.KeyCode.RightShift then
        toggleGuiVisibility()
    elseif input.KeyCode == Enum.KeyCode.U then
        unloadScripts()
    end
end)

-- Instructions Label
local instructionsLabel = Instance.new("TextLabel")
instructionsLabel.Size = UDim2.new(1, 0, 0.15, 0)
instructionsLabel.Position = UDim2.new(0, 0, 1.05, 0)
instructionsLabel.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
instructionsLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
instructionsLabel.Text = "Up/Down: Select | Enter: Toggle | RShift: Hide"
instructionsLabel.TextSize = 12
instructionsLabel.Font = Enum.Font.SourceSans
instructionsLabel.Parent = frame

-- Initial update
updateSelection()

-- Welcome message
StarterGui:SetCore("SendNotification", {
    Title = "Menu Loaded",
    Text = "Use Up/Down to select, Enter to toggle, RShift to hide",
    Duration = 5
})

-- Function to unload all scripts
local function unloadScripts()
    for i = 1, #features do
        if featureStates[i] then
            unloadFeatureScript(i)
            featureStates[i] = false
        end
    end

    -- Update the GUI to reflect the unloaded states
    updateSelection()

    -- Notify the user
    StarterGui:SetCore("SendNotification", {
        Title = "Scripts Unloaded",
        Text = "All scripts have been unloaded.",
        Duration = 5
    })
end
